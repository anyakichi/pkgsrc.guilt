# HG changeset patch
# Parent 1e92f388bca866be91d88369e7dec6a588de2fb6
# Parent  086fd2fbb679a49ce27f5e6a81d336ebbbecb0aa
aa

diff --git a/patches/misc/tmux/wcwidth.patch b/patches/misc/tmux/wcwidth.patch
new file mode 100644
--- /dev/null
+++ b/patches/misc/tmux/wcwidth.patch
@@ -0,0 +1,527 @@
+--- tmux.c.orig	2015-09-15 14:54:36.000000000 +0000
++++ tmux.c
+@@ -215,6 +215,7 @@ main(int argc, char **argv)
+ 	malloc_options = (char *) "AFGJPX";
+ #endif
+ 
++	setlocale(LC_CTYPE, "");
+ 	setlocale(LC_TIME, "");
+ 
+ 	flags = 0;
+--- utf8.c.orig	2015-09-20 11:00:56.000000000 +0900
++++ utf8.c	2015-09-20 11:07:17.000000000 +0900
+@@ -20,184 +20,275 @@
+ 
+ #include <stdlib.h>
+ #include <string.h>
++#include <wchar.h>
+ 
+ #include "tmux.h"
+ 
+-struct utf8_width_entry {
+-	u_int	first;
+-	u_int	last;
++#define AMBIWIDTH	2
+ 
+-	int	width;
+-
+-	struct utf8_width_entry	*left;
+-	struct utf8_width_entry	*right;
++#ifdef AMBIWIDTH
++struct ambiwidth_entry {
++	wchar_t first;
++	wchar_t last;
+ };
+ 
++/* Ambiguous character's width */
++int ambiwidth = AMBIWIDTH;
++
+ /* Random order. Not optimal but it'll do for now... */
+-struct utf8_width_entry utf8_width_table[] = {
+-	{ 0x00951, 0x00954, 0, NULL, NULL },
+-	{ 0x00ccc, 0x00ccd, 0, NULL, NULL },
+-	{ 0x0fff9, 0x0fffb, 0, NULL, NULL },
+-	{ 0x20000, 0x2fffd, 2, NULL, NULL },
+-	{ 0x00ebb, 0x00ebc, 0, NULL, NULL },
+-	{ 0x01932, 0x01932, 0, NULL, NULL },
+-	{ 0x0070f, 0x0070f, 0, NULL, NULL },
+-	{ 0x00a70, 0x00a71, 0, NULL, NULL },
+-	{ 0x02329, 0x02329, 2, NULL, NULL },
+-	{ 0x00acd, 0x00acd, 0, NULL, NULL },
+-	{ 0x00ac7, 0x00ac8, 0, NULL, NULL },
+-	{ 0x00a3c, 0x00a3c, 0, NULL, NULL },
+-	{ 0x009cd, 0x009cd, 0, NULL, NULL },
+-	{ 0x00591, 0x005bd, 0, NULL, NULL },
+-	{ 0x01058, 0x01059, 0, NULL, NULL },
+-	{ 0x0ffe0, 0x0ffe6, 2, NULL, NULL },
+-	{ 0x01100, 0x0115f, 2, NULL, NULL },
+-	{ 0x0fe20, 0x0fe23, 0, NULL, NULL },
+-	{ 0x0302a, 0x0302f, 0, NULL, NULL },
+-	{ 0x01772, 0x01773, 0, NULL, NULL },
+-	{ 0x005bf, 0x005bf, 0, NULL, NULL },
+-	{ 0x006ea, 0x006ed, 0, NULL, NULL },
+-	{ 0x00bc0, 0x00bc0, 0, NULL, NULL },
+-	{ 0x00962, 0x00963, 0, NULL, NULL },
+-	{ 0x01732, 0x01734, 0, NULL, NULL },
+-	{ 0x00d41, 0x00d43, 0, NULL, NULL },
+-	{ 0x01b42, 0x01b42, 0, NULL, NULL },
+-	{ 0x00a41, 0x00a42, 0, NULL, NULL },
+-	{ 0x00eb4, 0x00eb9, 0, NULL, NULL },
+-	{ 0x00b01, 0x00b01, 0, NULL, NULL },
+-	{ 0x00e34, 0x00e3a, 0, NULL, NULL },
+-	{ 0x03040, 0x03098, 2, NULL, NULL },
+-	{ 0x0093c, 0x0093c, 0, NULL, NULL },
+-	{ 0x00c4a, 0x00c4d, 0, NULL, NULL },
+-	{ 0x01032, 0x01032, 0, NULL, NULL },
+-	{ 0x00f37, 0x00f37, 0, NULL, NULL },
+-	{ 0x00901, 0x00902, 0, NULL, NULL },
+-	{ 0x00cbf, 0x00cbf, 0, NULL, NULL },
+-	{ 0x0a806, 0x0a806, 0, NULL, NULL },
+-	{ 0x00dd2, 0x00dd4, 0, NULL, NULL },
+-	{ 0x00f71, 0x00f7e, 0, NULL, NULL },
+-	{ 0x01752, 0x01753, 0, NULL, NULL },
+-	{ 0x1d242, 0x1d244, 0, NULL, NULL },
+-	{ 0x005c1, 0x005c2, 0, NULL, NULL },
+-	{ 0x0309b, 0x0a4cf, 2, NULL, NULL },
+-	{ 0xe0100, 0xe01ef, 0, NULL, NULL },
+-	{ 0x017dd, 0x017dd, 0, NULL, NULL },
+-	{ 0x00600, 0x00603, 0, NULL, NULL },
+-	{ 0x009e2, 0x009e3, 0, NULL, NULL },
+-	{ 0x00cc6, 0x00cc6, 0, NULL, NULL },
+-	{ 0x0a80b, 0x0a80b, 0, NULL, NULL },
+-	{ 0x01712, 0x01714, 0, NULL, NULL },
+-	{ 0x00b3c, 0x00b3c, 0, NULL, NULL },
+-	{ 0x01b00, 0x01b03, 0, NULL, NULL },
+-	{ 0x007eb, 0x007f3, 0, NULL, NULL },
+-	{ 0xe0001, 0xe0001, 0, NULL, NULL },
+-	{ 0x1d185, 0x1d18b, 0, NULL, NULL },
+-	{ 0x0feff, 0x0feff, 0, NULL, NULL },
+-	{ 0x01b36, 0x01b3a, 0, NULL, NULL },
+-	{ 0x01920, 0x01922, 0, NULL, NULL },
+-	{ 0x00670, 0x00670, 0, NULL, NULL },
+-	{ 0x00f90, 0x00f97, 0, NULL, NULL },
+-	{ 0x01927, 0x01928, 0, NULL, NULL },
+-	{ 0x0200b, 0x0200f, 0, NULL, NULL },
+-	{ 0x0ff00, 0x0ff60, 2, NULL, NULL },
+-	{ 0x0f900, 0x0faff, 2, NULL, NULL },
+-	{ 0x0fb1e, 0x0fb1e, 0, NULL, NULL },
+-	{ 0x00cbc, 0x00cbc, 0, NULL, NULL },
+-	{ 0x00eb1, 0x00eb1, 0, NULL, NULL },
+-	{ 0x10a38, 0x10a3a, 0, NULL, NULL },
+-	{ 0x007a6, 0x007b0, 0, NULL, NULL },
+-	{ 0x00f80, 0x00f84, 0, NULL, NULL },
+-	{ 0x005c4, 0x005c5, 0, NULL, NULL },
+-	{ 0x0ac00, 0x0d7a3, 2, NULL, NULL },
+-	{ 0x017c9, 0x017d3, 0, NULL, NULL },
+-	{ 0x00d4d, 0x00d4d, 0, NULL, NULL },
+-	{ 0x1d167, 0x1d169, 0, NULL, NULL },
+-	{ 0x01036, 0x01037, 0, NULL, NULL },
+-	{ 0xe0020, 0xe007f, 0, NULL, NULL },
+-	{ 0x00f35, 0x00f35, 0, NULL, NULL },
+-	{ 0x017b4, 0x017b5, 0, NULL, NULL },
+-	{ 0x0206a, 0x0206f, 0, NULL, NULL },
+-	{ 0x00c46, 0x00c48, 0, NULL, NULL },
+-	{ 0x01939, 0x0193b, 0, NULL, NULL },
+-	{ 0x01dc0, 0x01dca, 0, NULL, NULL },
+-	{ 0x10a0c, 0x10a0f, 0, NULL, NULL },
+-	{ 0x0102d, 0x01030, 0, NULL, NULL },
+-	{ 0x017c6, 0x017c6, 0, NULL, NULL },
+-	{ 0x00ec8, 0x00ecd, 0, NULL, NULL },
+-	{ 0x00b41, 0x00b43, 0, NULL, NULL },
+-	{ 0x017b7, 0x017bd, 0, NULL, NULL },
+-	{ 0x1d173, 0x1d182, 0, NULL, NULL },
+-	{ 0x00a47, 0x00a48, 0, NULL, NULL },
+-	{ 0x0232a, 0x0232a, 2, NULL, NULL },
+-	{ 0x01b3c, 0x01b3c, 0, NULL, NULL },
+-	{ 0x10a01, 0x10a03, 0, NULL, NULL },
+-	{ 0x00ae2, 0x00ae3, 0, NULL, NULL },
+-	{ 0x00483, 0x00486, 0, NULL, NULL },
+-	{ 0x0135f, 0x0135f, 0, NULL, NULL },
+-	{ 0x01a17, 0x01a18, 0, NULL, NULL },
+-	{ 0x006e7, 0x006e8, 0, NULL, NULL },
+-#ifndef __APPLE__
+-	{ 0x03099, 0x0309a, 0, NULL, NULL },
+-#endif
+-	{ 0x00b4d, 0x00b4d, 0, NULL, NULL },
+-	{ 0x00ce2, 0x00ce3, 0, NULL, NULL },
+-	{ 0x00bcd, 0x00bcd, 0, NULL, NULL },
+-	{ 0x00610, 0x00615, 0, NULL, NULL },
+-	{ 0x00f99, 0x00fbc, 0, NULL, NULL },
+-	{ 0x009c1, 0x009c4, 0, NULL, NULL },
+-	{ 0x00730, 0x0074a, 0, NULL, NULL },
+-	{ 0x00300, 0x0036f, 0, NULL, NULL },
+-	{ 0x03030, 0x0303e, 2, NULL, NULL },
+-	{ 0x01b34, 0x01b34, 0, NULL, NULL },
+-	{ 0x1d1aa, 0x1d1ad, 0, NULL, NULL },
+-	{ 0x00dca, 0x00dca, 0, NULL, NULL },
+-	{ 0x006d6, 0x006e4, 0, NULL, NULL },
+-	{ 0x00f86, 0x00f87, 0, NULL, NULL },
+-	{ 0x00b3f, 0x00b3f, 0, NULL, NULL },
+-	{ 0x0fe30, 0x0fe6f, 2, NULL, NULL },
+-	{ 0x01039, 0x01039, 0, NULL, NULL },
+-	{ 0x0094d, 0x0094d, 0, NULL, NULL },
+-	{ 0x00c55, 0x00c56, 0, NULL, NULL },
+-	{ 0x00488, 0x00489, 0, NULL, NULL },
+-	{ 0x00e47, 0x00e4e, 0, NULL, NULL },
+-	{ 0x00a81, 0x00a82, 0, NULL, NULL },
+-	{ 0x00ac1, 0x00ac5, 0, NULL, NULL },
+-	{ 0x0202a, 0x0202e, 0, NULL, NULL },
+-	{ 0x00dd6, 0x00dd6, 0, NULL, NULL },
+-	{ 0x018a9, 0x018a9, 0, NULL, NULL },
+-	{ 0x0064b, 0x0065e, 0, NULL, NULL },
+-	{ 0x00abc, 0x00abc, 0, NULL, NULL },
+-	{ 0x00b82, 0x00b82, 0, NULL, NULL },
+-	{ 0x00f39, 0x00f39, 0, NULL, NULL },
+-	{ 0x020d0, 0x020ef, 0, NULL, NULL },
+-	{ 0x01dfe, 0x01dff, 0, NULL, NULL },
+-	{ 0x30000, 0x3fffd, 2, NULL, NULL },
+-	{ 0x00711, 0x00711, 0, NULL, NULL },
+-	{ 0x0fe00, 0x0fe0f, 0, NULL, NULL },
+-	{ 0x0180b, 0x0180d, 0, NULL, NULL },
+-	{ 0x10a3f, 0x10a3f, 0, NULL, NULL },
+-	{ 0x00981, 0x00981, 0, NULL, NULL },
+-	{ 0x0a825, 0x0a826, 0, NULL, NULL },
+-	{ 0x00941, 0x00948, 0, NULL, NULL },
+-	{ 0x01b6b, 0x01b73, 0, NULL, NULL },
+-	{ 0x00e31, 0x00e31, 0, NULL, NULL },
+-	{ 0x0fe10, 0x0fe19, 2, NULL, NULL },
+-	{ 0x00a01, 0x00a02, 0, NULL, NULL },
+-	{ 0x00a4b, 0x00a4d, 0, NULL, NULL },
+-	{ 0x00f18, 0x00f19, 0, NULL, NULL },
+-	{ 0x00fc6, 0x00fc6, 0, NULL, NULL },
+-	{ 0x02e80, 0x03029, 2, NULL, NULL },
+-	{ 0x00b56, 0x00b56, 0, NULL, NULL },
+-	{ 0x009bc, 0x009bc, 0, NULL, NULL },
+-	{ 0x005c7, 0x005c7, 0, NULL, NULL },
+-	{ 0x02060, 0x02063, 0, NULL, NULL },
+-	{ 0x00c3e, 0x00c40, 0, NULL, NULL },
+-	{ 0x10a05, 0x10a06, 0, NULL, NULL },
++struct ambiwidth_entry ambiwidth_table[] = {
++	{ 0x0000a1, 0x0000a1 },
++	{ 0x0000a4, 0x0000a4 },
++	{ 0x0000a7, 0x0000a8 },
++	{ 0x0000aa, 0x0000aa },
++	{ 0x0000ad, 0x0000ae },
++	{ 0x0000b0, 0x0000b4 },
++	{ 0x0000b6, 0x0000ba },
++	{ 0x0000bc, 0x0000bf },
++	{ 0x0000c6, 0x0000c6 },
++	{ 0x0000d0, 0x0000d0 },
++	{ 0x0000d7, 0x0000d8 },
++	{ 0x0000de, 0x0000e1 },
++	{ 0x0000e6, 0x0000e6 },
++	{ 0x0000e8, 0x0000ea },
++	{ 0x0000ec, 0x0000ed },
++	{ 0x0000f0, 0x0000f0 },
++	{ 0x0000f2, 0x0000f3 },
++	{ 0x0000f7, 0x0000fa },
++	{ 0x0000fc, 0x0000fc },
++	{ 0x0000fe, 0x0000fe },
++	{ 0x000101, 0x000101 },
++	{ 0x000111, 0x000111 },
++	{ 0x000113, 0x000113 },
++	{ 0x00011b, 0x00011b },
++	{ 0x000126, 0x000127 },
++	{ 0x00012b, 0x00012b },
++	{ 0x000131, 0x000133 },
++	{ 0x000138, 0x000138 },
++	{ 0x00013f, 0x000142 },
++	{ 0x000144, 0x000144 },
++	{ 0x000148, 0x00014b },
++	{ 0x00014d, 0x00014d },
++	{ 0x000152, 0x000153 },
++	{ 0x000166, 0x000167 },
++	{ 0x00016b, 0x00016b },
++	{ 0x0001ce, 0x0001ce },
++	{ 0x0001d0, 0x0001d0 },
++	{ 0x0001d2, 0x0001d2 },
++	{ 0x0001d4, 0x0001d4 },
++	{ 0x0001d6, 0x0001d6 },
++	{ 0x0001d8, 0x0001d8 },
++	{ 0x0001da, 0x0001da },
++	{ 0x0001dc, 0x0001dc },
++	{ 0x000251, 0x000251 },
++	{ 0x000261, 0x000261 },
++	{ 0x0002c4, 0x0002c4 },
++	{ 0x0002c7, 0x0002c7 },
++	{ 0x0002c9, 0x0002cb },
++	{ 0x0002cd, 0x0002cd },
++	{ 0x0002d0, 0x0002d0 },
++	{ 0x0002d8, 0x0002db },
++	{ 0x0002dd, 0x0002dd },
++	{ 0x0002df, 0x0002df },
++	{ 0x000300, 0x00036f },
++	{ 0x000391, 0x0003a1 },
++	{ 0x0003a3, 0x0003a9 },
++	{ 0x0003b1, 0x0003c1 },
++	{ 0x0003c3, 0x0003c9 },
++	{ 0x000401, 0x000401 },
++	{ 0x000410, 0x00044f },
++	{ 0x000451, 0x000451 },
++	{ 0x002010, 0x002010 },
++	{ 0x002013, 0x002016 },
++	{ 0x002018, 0x002019 },
++	{ 0x00201c, 0x00201d },
++	{ 0x002020, 0x002022 },
++	{ 0x002024, 0x002027 },
++	{ 0x002030, 0x002030 },
++	{ 0x002032, 0x002033 },
++	{ 0x002035, 0x002035 },
++	{ 0x00203b, 0x00203b },
++	{ 0x00203e, 0x00203e },
++	{ 0x002074, 0x002074 },
++	{ 0x00207f, 0x00207f },
++	{ 0x002081, 0x002084 },
++	{ 0x0020ac, 0x0020ac },
++	{ 0x002103, 0x002103 },
++	{ 0x002105, 0x002105 },
++	{ 0x002109, 0x002109 },
++	{ 0x002113, 0x002113 },
++	{ 0x002116, 0x002116 },
++	{ 0x002121, 0x002122 },
++	{ 0x002126, 0x002126 },
++	{ 0x00212b, 0x00212b },
++	{ 0x002153, 0x002154 },
++	{ 0x00215b, 0x00215e },
++	{ 0x002160, 0x00216b },
++	{ 0x002170, 0x002179 },
++	{ 0x002189, 0x002189 },
++	{ 0x002190, 0x002199 },
++	{ 0x0021b8, 0x0021b9 },
++	{ 0x0021d2, 0x0021d2 },
++	{ 0x0021d4, 0x0021d4 },
++	{ 0x0021e7, 0x0021e7 },
++	{ 0x002200, 0x002200 },
++	{ 0x002202, 0x002203 },
++	{ 0x002207, 0x002208 },
++	{ 0x00220b, 0x00220b },
++	{ 0x00220f, 0x00220f },
++	{ 0x002211, 0x002211 },
++	{ 0x002215, 0x002215 },
++	{ 0x00221a, 0x00221a },
++	{ 0x00221d, 0x002220 },
++	{ 0x002223, 0x002223 },
++	{ 0x002225, 0x002225 },
++	{ 0x002227, 0x00222c },
++	{ 0x00222e, 0x00222e },
++	{ 0x002234, 0x002237 },
++	{ 0x00223c, 0x00223d },
++	{ 0x002248, 0x002248 },
++	{ 0x00224c, 0x00224c },
++	{ 0x002252, 0x002252 },
++	{ 0x002260, 0x002261 },
++	{ 0x002264, 0x002267 },
++	{ 0x00226a, 0x00226b },
++	{ 0x00226e, 0x00226f },
++	{ 0x002282, 0x002283 },
++	{ 0x002286, 0x002287 },
++	{ 0x002295, 0x002295 },
++	{ 0x002299, 0x002299 },
++	{ 0x0022a5, 0x0022a5 },
++	{ 0x0022bf, 0x0022bf },
++	{ 0x002312, 0x002312 },
++	{ 0x002460, 0x0024e9 },
++	{ 0x0024eb, 0x00254b },
++	{ 0x002550, 0x002573 },
++	{ 0x002580, 0x00258f },
++	{ 0x002592, 0x002595 },
++	{ 0x0025a0, 0x0025a1 },
++	{ 0x0025a3, 0x0025a9 },
++	{ 0x0025b2, 0x0025b3 },
++	{ 0x0025b6, 0x0025b7 },
++	{ 0x0025bc, 0x0025bd },
++	{ 0x0025c0, 0x0025c1 },
++	{ 0x0025c6, 0x0025c8 },
++	{ 0x0025cb, 0x0025cb },
++	{ 0x0025ce, 0x0025d1 },
++	{ 0x0025e2, 0x0025e5 },
++	{ 0x0025ef, 0x0025ef },
++	{ 0x002605, 0x002606 },
++	{ 0x002609, 0x002609 },
++	{ 0x00260e, 0x00260f },
++	{ 0x002614, 0x002615 },
++	{ 0x00261c, 0x00261c },
++	{ 0x00261e, 0x00261e },
++	{ 0x002640, 0x002640 },
++	{ 0x002642, 0x002642 },
++	{ 0x002660, 0x002661 },
++	{ 0x002663, 0x002665 },
++	{ 0x002667, 0x00266a },
++	{ 0x00266c, 0x00266d },
++	{ 0x00266f, 0x00266f },
++	{ 0x00269e, 0x00269f },
++	{ 0x0026be, 0x0026bf },
++	{ 0x0026c4, 0x0026cd },
++	{ 0x0026cf, 0x0026e1 },
++	{ 0x0026e3, 0x0026e3 },
++	{ 0x0026e8, 0x0026ff },
++	{ 0x00273d, 0x00273d },
++	{ 0x002757, 0x002757 },
++	{ 0x002776, 0x00277f },
++	{ 0x002b55, 0x002b59 },
++	{ 0x003248, 0x00324f },
++	{ 0x00e000, 0x00f8ff },
++	{ 0x00fe00, 0x00fe0f },
++	{ 0x00fffd, 0x00fffd },
++	{ 0x01f100, 0x01f10a },
++	{ 0x01f110, 0x01f12d },
++	{ 0x01f130, 0x01f169 },
++	{ 0x01f170, 0x01f19a },
++	{ 0x0e0100, 0x0e01ef },
++	{ 0x0f0000, 0x0ffffd },
++	{ 0x100000, 0x10fffd },
+ };
+ 
++static int
++comp(const void *vkey, const void *vent)
++{
++	wchar_t key = *(wchar_t *)vkey;
++	const struct ambiwidth_entry *ent =
++	    (const struct ambiwidth_entry *)vent;
++
++	if (key < ent->first)
++		return -1;
++	else if (key > ent->last)
++		return 1;
++	else
++		return 0;
++}
++#endif
++
++static int
++my_wcwidth(wchar_t wc)
++{
++	struct ambiwidth_entry *item;
++	int width;
++
++	/* C0 control codes */
++	if (wc == L'\0')
++		return 0;
++	if (wc < 0x20)
++		return -1;
++	/* check 0x20-0x7e here for speed */
++	if (wc < 0x7f)
++		return 1;
++	/* C1 control codes */
++	if (wc < 0xa0)
++		return -1;
++
++#ifdef __APPLE__
++	if (0x03099 <= wc && wc <= 0x0309a)
++		return 1;
++#endif
++
++	width = wcwidth(wc);
++
++	if (width != 1)
++		return width;
++
++#ifdef AMBIWIDTH
++	item = (struct ambiwidth_entry *)
++	    bsearch(&wc, (const void *)ambiwidth_table,
++		    sizeof(ambiwidth_table) / sizeof(ambiwidth_table[0]),
++		    sizeof(ambiwidth_table[0]), comp);
++
++	if (item != NULL)
++		return 2;
++#endif
++
++	return 1;
++}
++
++int
++my_wcswidth(const wchar_t *ws, size_t wn)
++{
++	int w, width;
++
++	width = 0;
++	while (wn > 0 && *ws != L'\0') {
++		w = my_wcwidth(*ws);
++		if (w < 0)
++			return -1;
++		width += w;
++		ws++;
++		wn--;
++	}
++
++	return width;
++}
++
+ struct utf8_width_entry	*utf8_width_root = NULL;
+ 
+-int	utf8_overlap(struct utf8_width_entry *, struct utf8_width_entry *);
+ u_int	utf8_combine(const struct utf8_data *);
+ u_int	utf8_width(const struct utf8_data *);
+ 
+@@ -257,46 +348,10 @@
+ 	return (0);
+ }
+ 
+-/* Check if two width tree entries overlap. */
+-int
+-utf8_overlap(struct utf8_width_entry *item1, struct utf8_width_entry *item2)
+-{
+-	if (item1->first >= item2->first && item1->first <= item2->last)
+-		return (1);
+-	if (item1->last >= item2->first && item1->last <= item2->last)
+-		return (1);
+-	if (item2->first >= item1->first && item2->first <= item1->last)
+-		return (1);
+-	if (item2->last >= item1->first && item2->last <= item1->last)
+-		return (1);
+-	return (0);
+-}
+-
+ /* Build UTF-8 width tree. */
+ void
+ utf8_build(void)
+ {
+-	struct utf8_width_entry	**ptr, *item, *node;
+-	u_int			  i, j;
+-
+-	for (i = 0; i < nitems(utf8_width_table); i++) {
+-		item = &utf8_width_table[i];
+-
+-		for (j = 0; j < nitems(utf8_width_table); j++) {
+-			if (i != j && utf8_overlap(item, &utf8_width_table[j]))
+-				log_fatalx("utf8 overlap: %u %u", i, j);
+-		}
+-
+-		ptr = &utf8_width_root;
+-		while (*ptr != NULL) {
+-			node = *ptr;
+-			if (item->last < node->first)
+-				ptr = &(node->left);
+-			else if (item->first > node->last)
+-				ptr = &(node->right);
+-		}
+-		*ptr = item;
+-	}
+ }
+ 
+ /* Combine UTF-8 into 32-bit Unicode. */
+@@ -346,21 +401,10 @@
+ u_int
+ utf8_width(const struct utf8_data *utf8data)
+ {
+-	struct utf8_width_entry	*item;
+-	u_int			 value;
+-
+-	value = utf8_combine(utf8data);
++	int width;
+ 
+-	item = utf8_width_root;
+-	while (item != NULL) {
+-		if (value < item->first)
+-			item = item->left;
+-		else if (value > item->last)
+-			item = item->right;
+-		else
+-			return (item->width);
+-	}
+-	return (1);
++	width = my_wcwidth(utf8_combine(utf8data));
++	return (width < 0) ? 1 : width;
+ }
+ 
+ /*
