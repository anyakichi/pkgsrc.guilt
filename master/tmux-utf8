# HG changeset patch
# Parent 99a0314dc880dd30e7c6cffa66e7f3bd865a06cd

diff -r 99a0314dc880 patches/misc/tmux/utf8.c.patch
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/patches/misc/tmux/utf8.c.patch	Sun Feb 03 19:32:47 2013 +0900
@@ -0,0 +1,698 @@
+--- utf8.c.orig	2012-11-01 12:07:49.000000000 +0900
++++ utf8.c	2012-11-01 12:09:31.000000000 +0900
+@@ -27,177 +27,433 @@
+ 	u_int	last;
+ 
+ 	int	width;
+-
+-	struct utf8_width_entry	*left;
+-	struct utf8_width_entry	*right;
+ };
+ 
++#define UTF8_COMB	0x1
++#define UTF8_WIDE	0x2
++#define UTF8_AMBI	0x4
++
++/* Ambiguous character's width */
++int ambiwidth = 2;
++
+ /* Random order. Not optimal but it'll do for now... */
+ struct utf8_width_entry utf8_width_table[] = {
+-	{ 0x00951, 0x00954, 0, NULL, NULL },
+-	{ 0x00ccc, 0x00ccd, 0, NULL, NULL },
+-	{ 0x0fff9, 0x0fffb, 0, NULL, NULL },
+-	{ 0x20000, 0x2fffd, 2, NULL, NULL },
+-	{ 0x00ebb, 0x00ebc, 0, NULL, NULL },
+-	{ 0x01932, 0x01932, 0, NULL, NULL },
+-	{ 0x0070f, 0x0070f, 0, NULL, NULL },
+-	{ 0x00a70, 0x00a71, 0, NULL, NULL },
+-	{ 0x02329, 0x02329, 2, NULL, NULL },
+-	{ 0x00acd, 0x00acd, 0, NULL, NULL },
+-	{ 0x00ac7, 0x00ac8, 0, NULL, NULL },
+-	{ 0x00a3c, 0x00a3c, 0, NULL, NULL },
+-	{ 0x009cd, 0x009cd, 0, NULL, NULL },
+-	{ 0x00591, 0x005bd, 0, NULL, NULL },
+-	{ 0x01058, 0x01059, 0, NULL, NULL },
+-	{ 0x0ffe0, 0x0ffe6, 2, NULL, NULL },
+-	{ 0x01100, 0x0115f, 2, NULL, NULL },
+-	{ 0x0fe20, 0x0fe23, 0, NULL, NULL },
+-	{ 0x0302a, 0x0302f, 0, NULL, NULL },
+-	{ 0x01772, 0x01773, 0, NULL, NULL },
+-	{ 0x005bf, 0x005bf, 0, NULL, NULL },
+-	{ 0x006ea, 0x006ed, 0, NULL, NULL },
+-	{ 0x00bc0, 0x00bc0, 0, NULL, NULL },
+-	{ 0x00962, 0x00963, 0, NULL, NULL },
+-	{ 0x01732, 0x01734, 0, NULL, NULL },
+-	{ 0x00d41, 0x00d43, 0, NULL, NULL },
+-	{ 0x01b42, 0x01b42, 0, NULL, NULL },
+-	{ 0x00a41, 0x00a42, 0, NULL, NULL },
+-	{ 0x00eb4, 0x00eb9, 0, NULL, NULL },
+-	{ 0x00b01, 0x00b01, 0, NULL, NULL },
+-	{ 0x00e34, 0x00e3a, 0, NULL, NULL },
+-	{ 0x03040, 0x03098, 2, NULL, NULL },
+-	{ 0x0093c, 0x0093c, 0, NULL, NULL },
+-	{ 0x00c4a, 0x00c4d, 0, NULL, NULL },
+-	{ 0x01032, 0x01032, 0, NULL, NULL },
+-	{ 0x00f37, 0x00f37, 0, NULL, NULL },
+-	{ 0x00901, 0x00902, 0, NULL, NULL },
+-	{ 0x00cbf, 0x00cbf, 0, NULL, NULL },
+-	{ 0x0a806, 0x0a806, 0, NULL, NULL },
+-	{ 0x00dd2, 0x00dd4, 0, NULL, NULL },
+-	{ 0x00f71, 0x00f7e, 0, NULL, NULL },
+-	{ 0x01752, 0x01753, 0, NULL, NULL },
+-	{ 0x1d242, 0x1d244, 0, NULL, NULL },
+-	{ 0x005c1, 0x005c2, 0, NULL, NULL },
+-	{ 0x0309b, 0x0a4cf, 2, NULL, NULL },
+-	{ 0xe0100, 0xe01ef, 0, NULL, NULL },
+-	{ 0x017dd, 0x017dd, 0, NULL, NULL },
+-	{ 0x00600, 0x00603, 0, NULL, NULL },
+-	{ 0x009e2, 0x009e3, 0, NULL, NULL },
+-	{ 0x00cc6, 0x00cc6, 0, NULL, NULL },
+-	{ 0x0a80b, 0x0a80b, 0, NULL, NULL },
+-	{ 0x01712, 0x01714, 0, NULL, NULL },
+-	{ 0x00b3c, 0x00b3c, 0, NULL, NULL },
+-	{ 0x01b00, 0x01b03, 0, NULL, NULL },
+-	{ 0x007eb, 0x007f3, 0, NULL, NULL },
+-	{ 0xe0001, 0xe0001, 0, NULL, NULL },
+-	{ 0x1d185, 0x1d18b, 0, NULL, NULL },
+-	{ 0x0feff, 0x0feff, 0, NULL, NULL },
+-	{ 0x01b36, 0x01b3a, 0, NULL, NULL },
+-	{ 0x01920, 0x01922, 0, NULL, NULL },
+-	{ 0x00670, 0x00670, 0, NULL, NULL },
+-	{ 0x00f90, 0x00f97, 0, NULL, NULL },
+-	{ 0x01927, 0x01928, 0, NULL, NULL },
+-	{ 0x0200b, 0x0200f, 0, NULL, NULL },
+-	{ 0x0ff00, 0x0ff60, 2, NULL, NULL },
+-	{ 0x0f900, 0x0faff, 2, NULL, NULL },
+-	{ 0x0fb1e, 0x0fb1e, 0, NULL, NULL },
+-	{ 0x00cbc, 0x00cbc, 0, NULL, NULL },
+-	{ 0x00eb1, 0x00eb1, 0, NULL, NULL },
+-	{ 0x10a38, 0x10a3a, 0, NULL, NULL },
+-	{ 0x007a6, 0x007b0, 0, NULL, NULL },
+-	{ 0x00f80, 0x00f84, 0, NULL, NULL },
+-	{ 0x005c4, 0x005c5, 0, NULL, NULL },
+-	{ 0x0ac00, 0x0d7a3, 2, NULL, NULL },
+-	{ 0x017c9, 0x017d3, 0, NULL, NULL },
+-	{ 0x00d4d, 0x00d4d, 0, NULL, NULL },
+-	{ 0x1d167, 0x1d169, 0, NULL, NULL },
+-	{ 0x01036, 0x01037, 0, NULL, NULL },
+-	{ 0xe0020, 0xe007f, 0, NULL, NULL },
+-	{ 0x00f35, 0x00f35, 0, NULL, NULL },
+-	{ 0x017b4, 0x017b5, 0, NULL, NULL },
+-	{ 0x0206a, 0x0206f, 0, NULL, NULL },
+-	{ 0x00c46, 0x00c48, 0, NULL, NULL },
+-	{ 0x01939, 0x0193b, 0, NULL, NULL },
+-	{ 0x01dc0, 0x01dca, 0, NULL, NULL },
+-	{ 0x10a0c, 0x10a0f, 0, NULL, NULL },
+-	{ 0x0102d, 0x01030, 0, NULL, NULL },
+-	{ 0x017c6, 0x017c6, 0, NULL, NULL },
+-	{ 0x00ec8, 0x00ecd, 0, NULL, NULL },
+-	{ 0x00b41, 0x00b43, 0, NULL, NULL },
+-	{ 0x017b7, 0x017bd, 0, NULL, NULL },
+-	{ 0x1d173, 0x1d182, 0, NULL, NULL },
+-	{ 0x00a47, 0x00a48, 0, NULL, NULL },
+-	{ 0x0232a, 0x0232a, 2, NULL, NULL },
+-	{ 0x01b3c, 0x01b3c, 0, NULL, NULL },
+-	{ 0x10a01, 0x10a03, 0, NULL, NULL },
+-	{ 0x00ae2, 0x00ae3, 0, NULL, NULL },
+-	{ 0x00483, 0x00486, 0, NULL, NULL },
+-	{ 0x0135f, 0x0135f, 0, NULL, NULL },
+-	{ 0x01a17, 0x01a18, 0, NULL, NULL },
+-	{ 0x006e7, 0x006e8, 0, NULL, NULL },
+-#ifndef __APPLE__
+-	{ 0x03099, 0x0309a, 0, NULL, NULL },
+-#endif
+-	{ 0x00b4d, 0x00b4d, 0, NULL, NULL },
+-	{ 0x00ce2, 0x00ce3, 0, NULL, NULL },
+-	{ 0x00bcd, 0x00bcd, 0, NULL, NULL },
+-	{ 0x00610, 0x00615, 0, NULL, NULL },
+-	{ 0x00f99, 0x00fbc, 0, NULL, NULL },
+-	{ 0x009c1, 0x009c4, 0, NULL, NULL },
+-	{ 0x00730, 0x0074a, 0, NULL, NULL },
+-	{ 0x00300, 0x0036f, 0, NULL, NULL },
+-	{ 0x03030, 0x0303e, 2, NULL, NULL },
+-	{ 0x01b34, 0x01b34, 0, NULL, NULL },
+-	{ 0x1d1aa, 0x1d1ad, 0, NULL, NULL },
+-	{ 0x00dca, 0x00dca, 0, NULL, NULL },
+-	{ 0x006d6, 0x006e4, 0, NULL, NULL },
+-	{ 0x00f86, 0x00f87, 0, NULL, NULL },
+-	{ 0x00b3f, 0x00b3f, 0, NULL, NULL },
+-	{ 0x0fe30, 0x0fe6f, 2, NULL, NULL },
+-	{ 0x01039, 0x01039, 0, NULL, NULL },
+-	{ 0x0094d, 0x0094d, 0, NULL, NULL },
+-	{ 0x00c55, 0x00c56, 0, NULL, NULL },
+-	{ 0x00488, 0x00489, 0, NULL, NULL },
+-	{ 0x00e47, 0x00e4e, 0, NULL, NULL },
+-	{ 0x00a81, 0x00a82, 0, NULL, NULL },
+-	{ 0x00ac1, 0x00ac5, 0, NULL, NULL },
+-	{ 0x0202a, 0x0202e, 0, NULL, NULL },
+-	{ 0x00dd6, 0x00dd6, 0, NULL, NULL },
+-	{ 0x018a9, 0x018a9, 0, NULL, NULL },
+-	{ 0x0064b, 0x0065e, 0, NULL, NULL },
+-	{ 0x00abc, 0x00abc, 0, NULL, NULL },
+-	{ 0x00b82, 0x00b82, 0, NULL, NULL },
+-	{ 0x00f39, 0x00f39, 0, NULL, NULL },
+-	{ 0x020d0, 0x020ef, 0, NULL, NULL },
+-	{ 0x01dfe, 0x01dff, 0, NULL, NULL },
+-	{ 0x30000, 0x3fffd, 2, NULL, NULL },
+-	{ 0x00711, 0x00711, 0, NULL, NULL },
+-	{ 0x0fe00, 0x0fe0f, 0, NULL, NULL },
+-	{ 0x01160, 0x011ff, 0, NULL, NULL },
+-	{ 0x0180b, 0x0180d, 0, NULL, NULL },
+-	{ 0x10a3f, 0x10a3f, 0, NULL, NULL },
+-	{ 0x00981, 0x00981, 0, NULL, NULL },
+-	{ 0x0a825, 0x0a826, 0, NULL, NULL },
+-	{ 0x00941, 0x00948, 0, NULL, NULL },
+-	{ 0x01b6b, 0x01b73, 0, NULL, NULL },
+-	{ 0x00e31, 0x00e31, 0, NULL, NULL },
+-	{ 0x0fe10, 0x0fe19, 2, NULL, NULL },
+-	{ 0x00a01, 0x00a02, 0, NULL, NULL },
+-	{ 0x00a4b, 0x00a4d, 0, NULL, NULL },
+-	{ 0x00f18, 0x00f19, 0, NULL, NULL },
+-	{ 0x00fc6, 0x00fc6, 0, NULL, NULL },
+-	{ 0x02e80, 0x03029, 2, NULL, NULL },
+-	{ 0x00b56, 0x00b56, 0, NULL, NULL },
+-	{ 0x009bc, 0x009bc, 0, NULL, NULL },
+-	{ 0x005c7, 0x005c7, 0, NULL, NULL },
+-	{ 0x02060, 0x02063, 0, NULL, NULL },
+-	{ 0x00c3e, 0x00c40, 0, NULL, NULL },
+-	{ 0x10a05, 0x10a06, 0, NULL, NULL },
++	{ 0x0000a1, 0x0000a1, UTF8_AMBI },
++	{ 0x0000a4, 0x0000a4, UTF8_AMBI },
++	{ 0x0000a7, 0x0000a8, UTF8_AMBI },
++	{ 0x0000aa, 0x0000aa, UTF8_AMBI },
++	{ 0x0000ad, 0x0000ae, UTF8_AMBI },
++	{ 0x0000b0, 0x0000b4, UTF8_AMBI },
++	{ 0x0000b6, 0x0000ba, UTF8_AMBI },
++	{ 0x0000bc, 0x0000bf, UTF8_AMBI },
++	{ 0x0000c6, 0x0000c6, UTF8_AMBI },
++	{ 0x0000d0, 0x0000d0, UTF8_AMBI },
++	{ 0x0000d7, 0x0000d8, UTF8_AMBI },
++	{ 0x0000de, 0x0000e1, UTF8_AMBI },
++	{ 0x0000e6, 0x0000e6, UTF8_AMBI },
++	{ 0x0000e8, 0x0000ea, UTF8_AMBI },
++	{ 0x0000ec, 0x0000ed, UTF8_AMBI },
++	{ 0x0000f0, 0x0000f0, UTF8_AMBI },
++	{ 0x0000f2, 0x0000f3, UTF8_AMBI },
++	{ 0x0000f7, 0x0000fa, UTF8_AMBI },
++	{ 0x0000fc, 0x0000fc, UTF8_AMBI },
++	{ 0x0000fe, 0x0000fe, UTF8_AMBI },
++	{ 0x000101, 0x000101, UTF8_AMBI },
++	{ 0x000111, 0x000111, UTF8_AMBI },
++	{ 0x000113, 0x000113, UTF8_AMBI },
++	{ 0x00011b, 0x00011b, UTF8_AMBI },
++	{ 0x000126, 0x000127, UTF8_AMBI },
++	{ 0x00012b, 0x00012b, UTF8_AMBI },
++	{ 0x000131, 0x000133, UTF8_AMBI },
++	{ 0x000138, 0x000138, UTF8_AMBI },
++	{ 0x00013f, 0x000142, UTF8_AMBI },
++	{ 0x000144, 0x000144, UTF8_AMBI },
++	{ 0x000148, 0x00014b, UTF8_AMBI },
++	{ 0x00014d, 0x00014d, UTF8_AMBI },
++	{ 0x000152, 0x000153, UTF8_AMBI },
++	{ 0x000166, 0x000167, UTF8_AMBI },
++	{ 0x00016b, 0x00016b, UTF8_AMBI },
++	{ 0x0001ce, 0x0001ce, UTF8_AMBI },
++	{ 0x0001d0, 0x0001d0, UTF8_AMBI },
++	{ 0x0001d2, 0x0001d2, UTF8_AMBI },
++	{ 0x0001d4, 0x0001d4, UTF8_AMBI },
++	{ 0x0001d6, 0x0001d6, UTF8_AMBI },
++	{ 0x0001d8, 0x0001d8, UTF8_AMBI },
++	{ 0x0001da, 0x0001da, UTF8_AMBI },
++	{ 0x0001dc, 0x0001dc, UTF8_AMBI },
++	{ 0x000251, 0x000251, UTF8_AMBI },
++	{ 0x000261, 0x000261, UTF8_AMBI },
++	{ 0x0002c4, 0x0002c4, UTF8_AMBI },
++	{ 0x0002c7, 0x0002c7, UTF8_AMBI },
++	{ 0x0002c9, 0x0002cb, UTF8_AMBI },
++	{ 0x0002cd, 0x0002cd, UTF8_AMBI },
++	{ 0x0002d0, 0x0002d0, UTF8_AMBI },
++	{ 0x0002d8, 0x0002db, UTF8_AMBI },
++	{ 0x0002dd, 0x0002dd, UTF8_AMBI },
++	{ 0x0002df, 0x0002df, UTF8_AMBI },
++	{ 0x000300, 0x00036f, UTF8_AMBI | UTF8_COMB},
++	{ 0x000391, 0x0003a1, UTF8_AMBI },
++	{ 0x0003a3, 0x0003a9, UTF8_AMBI },
++	{ 0x0003b1, 0x0003c1, UTF8_AMBI },
++	{ 0x0003c3, 0x0003c9, UTF8_AMBI },
++	{ 0x000401, 0x000401, UTF8_AMBI },
++	{ 0x000410, 0x00044f, UTF8_AMBI },
++	{ 0x000451, 0x000451, UTF8_AMBI },
++	{ 0x000483, 0x000489, UTF8_COMB },
++	{ 0x000591, 0x0005bd, UTF8_COMB },
++	{ 0x0005bf, 0x0005bf, UTF8_COMB },
++	{ 0x0005c1, 0x0005c2, UTF8_COMB },
++	{ 0x0005c4, 0x0005c5, UTF8_COMB },
++	{ 0x0005c7, 0x0005c7, UTF8_COMB },
++	{ 0x000610, 0x00061a, UTF8_COMB },
++	{ 0x00064b, 0x00065f, UTF8_COMB },
++	{ 0x000670, 0x000670, UTF8_COMB },
++	{ 0x0006d6, 0x0006dc, UTF8_COMB },
++	{ 0x0006df, 0x0006e4, UTF8_COMB },
++	{ 0x0006e7, 0x0006e8, UTF8_COMB },
++	{ 0x0006ea, 0x0006ed, UTF8_COMB },
++	{ 0x000711, 0x000711, UTF8_COMB },
++	{ 0x000730, 0x00074a, UTF8_COMB },
++	{ 0x0007a6, 0x0007b0, UTF8_COMB },
++	{ 0x0007eb, 0x0007f3, UTF8_COMB },
++	{ 0x000816, 0x000819, UTF8_COMB },
++	{ 0x00081b, 0x000823, UTF8_COMB },
++	{ 0x000825, 0x000827, UTF8_COMB },
++	{ 0x000829, 0x00082d, UTF8_COMB },
++	{ 0x000859, 0x00085b, UTF8_COMB },
++	{ 0x000900, 0x000903, UTF8_COMB },
++	{ 0x00093a, 0x00093c, UTF8_COMB },
++	{ 0x00093e, 0x00094f, UTF8_COMB },
++	{ 0x000951, 0x000957, UTF8_COMB },
++	{ 0x000962, 0x000963, UTF8_COMB },
++	{ 0x000981, 0x000983, UTF8_COMB },
++	{ 0x0009bc, 0x0009bc, UTF8_COMB },
++	{ 0x0009be, 0x0009c4, UTF8_COMB },
++	{ 0x0009c7, 0x0009c8, UTF8_COMB },
++	{ 0x0009cb, 0x0009cd, UTF8_COMB },
++	{ 0x0009d7, 0x0009d7, UTF8_COMB },
++	{ 0x0009e2, 0x0009e3, UTF8_COMB },
++	{ 0x000a01, 0x000a03, UTF8_COMB },
++	{ 0x000a3c, 0x000a3c, UTF8_COMB },
++	{ 0x000a3e, 0x000a42, UTF8_COMB },
++	{ 0x000a47, 0x000a48, UTF8_COMB },
++	{ 0x000a4b, 0x000a4d, UTF8_COMB },
++	{ 0x000a51, 0x000a51, UTF8_COMB },
++	{ 0x000a70, 0x000a71, UTF8_COMB },
++	{ 0x000a75, 0x000a75, UTF8_COMB },
++	{ 0x000a81, 0x000a83, UTF8_COMB },
++	{ 0x000abc, 0x000abc, UTF8_COMB },
++	{ 0x000abe, 0x000ac5, UTF8_COMB },
++	{ 0x000ac7, 0x000ac9, UTF8_COMB },
++	{ 0x000acb, 0x000acd, UTF8_COMB },
++	{ 0x000ae2, 0x000ae3, UTF8_COMB },
++	{ 0x000b01, 0x000b03, UTF8_COMB },
++	{ 0x000b3c, 0x000b3c, UTF8_COMB },
++	{ 0x000b3e, 0x000b44, UTF8_COMB },
++	{ 0x000b47, 0x000b48, UTF8_COMB },
++	{ 0x000b4b, 0x000b4d, UTF8_COMB },
++	{ 0x000b56, 0x000b57, UTF8_COMB },
++	{ 0x000b62, 0x000b63, UTF8_COMB },
++	{ 0x000b82, 0x000b82, UTF8_COMB },
++	{ 0x000bbe, 0x000bc2, UTF8_COMB },
++	{ 0x000bc6, 0x000bc8, UTF8_COMB },
++	{ 0x000bca, 0x000bcd, UTF8_COMB },
++	{ 0x000bd7, 0x000bd7, UTF8_COMB },
++	{ 0x000c01, 0x000c03, UTF8_COMB },
++	{ 0x000c3e, 0x000c44, UTF8_COMB },
++	{ 0x000c46, 0x000c48, UTF8_COMB },
++	{ 0x000c4a, 0x000c4d, UTF8_COMB },
++	{ 0x000c55, 0x000c56, UTF8_COMB },
++	{ 0x000c62, 0x000c63, UTF8_COMB },
++	{ 0x000c82, 0x000c83, UTF8_COMB },
++	{ 0x000cbc, 0x000cbc, UTF8_COMB },
++	{ 0x000cbe, 0x000cc4, UTF8_COMB },
++	{ 0x000cc6, 0x000cc8, UTF8_COMB },
++	{ 0x000cca, 0x000ccd, UTF8_COMB },
++	{ 0x000cd5, 0x000cd6, UTF8_COMB },
++	{ 0x000ce2, 0x000ce3, UTF8_COMB },
++	{ 0x000d02, 0x000d03, UTF8_COMB },
++	{ 0x000d3e, 0x000d44, UTF8_COMB },
++	{ 0x000d46, 0x000d48, UTF8_COMB },
++	{ 0x000d4a, 0x000d4d, UTF8_COMB },
++	{ 0x000d57, 0x000d57, UTF8_COMB },
++	{ 0x000d62, 0x000d63, UTF8_COMB },
++	{ 0x000d82, 0x000d83, UTF8_COMB },
++	{ 0x000dca, 0x000dca, UTF8_COMB },
++	{ 0x000dcf, 0x000dd4, UTF8_COMB },
++	{ 0x000dd6, 0x000dd6, UTF8_COMB },
++	{ 0x000dd8, 0x000ddf, UTF8_COMB },
++	{ 0x000df2, 0x000df3, UTF8_COMB },
++	{ 0x000e31, 0x000e31, UTF8_COMB },
++	{ 0x000e34, 0x000e3a, UTF8_COMB },
++	{ 0x000e47, 0x000e4e, UTF8_COMB },
++	{ 0x000eb1, 0x000eb1, UTF8_COMB },
++	{ 0x000eb4, 0x000eb9, UTF8_COMB },
++	{ 0x000ebb, 0x000ebc, UTF8_COMB },
++	{ 0x000ec8, 0x000ecd, UTF8_COMB },
++	{ 0x000f18, 0x000f19, UTF8_COMB },
++	{ 0x000f35, 0x000f35, UTF8_COMB },
++	{ 0x000f37, 0x000f37, UTF8_COMB },
++	{ 0x000f39, 0x000f39, UTF8_COMB },
++	{ 0x000f3e, 0x000f3f, UTF8_COMB },
++	{ 0x000f71, 0x000f84, UTF8_COMB },
++	{ 0x000f86, 0x000f87, UTF8_COMB },
++	{ 0x000f8d, 0x000f97, UTF8_COMB },
++	{ 0x000f99, 0x000fbc, UTF8_COMB },
++	{ 0x000fc6, 0x000fc6, UTF8_COMB },
++	{ 0x00102b, 0x00103e, UTF8_COMB },
++	{ 0x001056, 0x001059, UTF8_COMB },
++	{ 0x00105e, 0x001060, UTF8_COMB },
++	{ 0x001062, 0x001064, UTF8_COMB },
++	{ 0x001067, 0x00106d, UTF8_COMB },
++	{ 0x001071, 0x001074, UTF8_COMB },
++	{ 0x001082, 0x00108d, UTF8_COMB },
++	{ 0x00108f, 0x00108f, UTF8_COMB },
++	{ 0x00109a, 0x00109d, UTF8_COMB },
++	{ 0x001100, 0x00115f, UTF8_WIDE },
++	{ 0x0011a3, 0x0011a7, UTF8_WIDE },
++	{ 0x0011fa, 0x0011ff, UTF8_WIDE },
++	{ 0x00135d, 0x00135f, UTF8_COMB },
++	{ 0x001712, 0x001714, UTF8_COMB },
++	{ 0x001732, 0x001734, UTF8_COMB },
++	{ 0x001752, 0x001753, UTF8_COMB },
++	{ 0x001772, 0x001773, UTF8_COMB },
++	{ 0x0017b6, 0x0017d3, UTF8_COMB },
++	{ 0x0017dd, 0x0017dd, UTF8_COMB },
++	{ 0x00180b, 0x00180d, UTF8_COMB },
++	{ 0x0018a9, 0x0018a9, UTF8_COMB },
++	{ 0x001920, 0x00192b, UTF8_COMB },
++	{ 0x001930, 0x00193b, UTF8_COMB },
++	{ 0x0019b0, 0x0019c0, UTF8_COMB },
++	{ 0x0019c8, 0x0019c9, UTF8_COMB },
++	{ 0x001a17, 0x001a1b, UTF8_COMB },
++	{ 0x001a55, 0x001a5e, UTF8_COMB },
++	{ 0x001a60, 0x001a7c, UTF8_COMB },
++	{ 0x001a7f, 0x001a7f, UTF8_COMB },
++	{ 0x001b00, 0x001b04, UTF8_COMB },
++	{ 0x001b34, 0x001b44, UTF8_COMB },
++	{ 0x001b6b, 0x001b73, UTF8_COMB },
++	{ 0x001b80, 0x001b82, UTF8_COMB },
++	{ 0x001ba1, 0x001baa, UTF8_COMB },
++	{ 0x001be6, 0x001bf3, UTF8_COMB },
++	{ 0x001c24, 0x001c37, UTF8_COMB },
++	{ 0x001cd0, 0x001cd2, UTF8_COMB },
++	{ 0x001cd4, 0x001ce8, UTF8_COMB },
++	{ 0x001ced, 0x001ced, UTF8_COMB },
++	{ 0x001cf2, 0x001cf2, UTF8_COMB },
++	{ 0x001dc0, 0x001de6, UTF8_COMB },
++	{ 0x001dfc, 0x001dff, UTF8_COMB },
++	{ 0x002010, 0x002010, UTF8_AMBI },
++	{ 0x002013, 0x002016, UTF8_AMBI },
++	{ 0x002018, 0x002019, UTF8_AMBI },
++	{ 0x00201c, 0x00201d, UTF8_AMBI },
++	{ 0x002020, 0x002022, UTF8_AMBI },
++	{ 0x002024, 0x002027, UTF8_AMBI },
++	{ 0x002030, 0x002030, UTF8_AMBI },
++	{ 0x002032, 0x002033, UTF8_AMBI },
++	{ 0x002035, 0x002035, UTF8_AMBI },
++	{ 0x00203b, 0x00203b, UTF8_AMBI },
++	{ 0x00203e, 0x00203e, UTF8_AMBI },
++	{ 0x002074, 0x002074, UTF8_AMBI },
++	{ 0x00207f, 0x00207f, UTF8_AMBI },
++	{ 0x002081, 0x002084, UTF8_AMBI },
++	{ 0x0020ac, 0x0020ac, UTF8_AMBI },
++	{ 0x0020d0, 0x0020f0, UTF8_COMB },
++	{ 0x002103, 0x002103, UTF8_AMBI },
++	{ 0x002105, 0x002105, UTF8_AMBI },
++	{ 0x002109, 0x002109, UTF8_AMBI },
++	{ 0x002113, 0x002113, UTF8_AMBI },
++	{ 0x002116, 0x002116, UTF8_AMBI },
++	{ 0x002121, 0x002122, UTF8_AMBI },
++	{ 0x002126, 0x002126, UTF8_AMBI },
++	{ 0x00212b, 0x00212b, UTF8_AMBI },
++	{ 0x002153, 0x002154, UTF8_AMBI },
++	{ 0x00215b, 0x00215e, UTF8_AMBI },
++	{ 0x002160, 0x00216b, UTF8_AMBI },
++	{ 0x002170, 0x002179, UTF8_AMBI },
++	{ 0x002189, 0x002189, UTF8_AMBI },
++	{ 0x002190, 0x002199, UTF8_AMBI },
++	{ 0x0021b8, 0x0021b9, UTF8_AMBI },
++	{ 0x0021d2, 0x0021d2, UTF8_AMBI },
++	{ 0x0021d4, 0x0021d4, UTF8_AMBI },
++	{ 0x0021e7, 0x0021e7, UTF8_AMBI },
++	{ 0x002200, 0x002200, UTF8_AMBI },
++	{ 0x002202, 0x002203, UTF8_AMBI },
++	{ 0x002207, 0x002208, UTF8_AMBI },
++	{ 0x00220b, 0x00220b, UTF8_AMBI },
++	{ 0x00220f, 0x00220f, UTF8_AMBI },
++	{ 0x002211, 0x002211, UTF8_AMBI },
++	{ 0x002215, 0x002215, UTF8_AMBI },
++	{ 0x00221a, 0x00221a, UTF8_AMBI },
++	{ 0x00221d, 0x002220, UTF8_AMBI },
++	{ 0x002223, 0x002223, UTF8_AMBI },
++	{ 0x002225, 0x002225, UTF8_AMBI },
++	{ 0x002227, 0x00222c, UTF8_AMBI },
++	{ 0x00222e, 0x00222e, UTF8_AMBI },
++	{ 0x002234, 0x002237, UTF8_AMBI },
++	{ 0x00223c, 0x00223d, UTF8_AMBI },
++	{ 0x002248, 0x002248, UTF8_AMBI },
++	{ 0x00224c, 0x00224c, UTF8_AMBI },
++	{ 0x002252, 0x002252, UTF8_AMBI },
++	{ 0x002260, 0x002261, UTF8_AMBI },
++	{ 0x002264, 0x002267, UTF8_AMBI },
++	{ 0x00226a, 0x00226b, UTF8_AMBI },
++	{ 0x00226e, 0x00226f, UTF8_AMBI },
++	{ 0x002282, 0x002283, UTF8_AMBI },
++	{ 0x002286, 0x002287, UTF8_AMBI },
++	{ 0x002295, 0x002295, UTF8_AMBI },
++	{ 0x002299, 0x002299, UTF8_AMBI },
++	{ 0x0022a5, 0x0022a5, UTF8_AMBI },
++	{ 0x0022bf, 0x0022bf, UTF8_AMBI },
++	{ 0x002312, 0x002312, UTF8_AMBI },
++	{ 0x002329, 0x00232a, UTF8_WIDE },
++	{ 0x002460, 0x0024e9, UTF8_AMBI },
++	{ 0x0024eb, 0x00254b, UTF8_AMBI },
++	{ 0x002550, 0x002573, UTF8_AMBI },
++	{ 0x002580, 0x00258f, UTF8_AMBI },
++	{ 0x002592, 0x002595, UTF8_AMBI },
++	{ 0x0025a0, 0x0025a1, UTF8_AMBI },
++	{ 0x0025a3, 0x0025a9, UTF8_AMBI },
++	{ 0x0025b2, 0x0025b3, UTF8_AMBI },
++	{ 0x0025b6, 0x0025b7, UTF8_AMBI },
++	{ 0x0025bc, 0x0025bd, UTF8_AMBI },
++	{ 0x0025c0, 0x0025c1, UTF8_AMBI },
++	{ 0x0025c6, 0x0025c8, UTF8_AMBI },
++	{ 0x0025cb, 0x0025cb, UTF8_AMBI },
++	{ 0x0025ce, 0x0025d1, UTF8_AMBI },
++	{ 0x0025e2, 0x0025e5, UTF8_AMBI },
++	{ 0x0025ef, 0x0025ef, UTF8_AMBI },
++	{ 0x002605, 0x002606, UTF8_AMBI },
++	{ 0x002609, 0x002609, UTF8_AMBI },
++	{ 0x00260e, 0x00260f, UTF8_AMBI },
++	{ 0x002614, 0x002615, UTF8_AMBI },
++	{ 0x00261c, 0x00261c, UTF8_AMBI },
++	{ 0x00261e, 0x00261e, UTF8_AMBI },
++	{ 0x002640, 0x002640, UTF8_AMBI },
++	{ 0x002642, 0x002642, UTF8_AMBI },
++	{ 0x002660, 0x002661, UTF8_AMBI },
++	{ 0x002663, 0x002665, UTF8_AMBI },
++	{ 0x002667, 0x00266a, UTF8_AMBI },
++	{ 0x00266c, 0x00266d, UTF8_AMBI },
++	{ 0x00266f, 0x00266f, UTF8_AMBI },
++	{ 0x00269e, 0x00269f, UTF8_AMBI },
++	{ 0x0026be, 0x0026bf, UTF8_AMBI },
++	{ 0x0026c4, 0x0026cd, UTF8_AMBI },
++	{ 0x0026cf, 0x0026e1, UTF8_AMBI },
++	{ 0x0026e3, 0x0026e3, UTF8_AMBI },
++	{ 0x0026e8, 0x0026ff, UTF8_AMBI },
++	{ 0x00273d, 0x00273d, UTF8_AMBI },
++	{ 0x002757, 0x002757, UTF8_AMBI },
++	{ 0x002776, 0x00277f, UTF8_AMBI },
++	{ 0x002b55, 0x002b59, UTF8_AMBI },
++	{ 0x002cef, 0x002cf1, UTF8_COMB },
++	{ 0x002d7f, 0x002d7f, UTF8_COMB },
++	{ 0x002de0, 0x002dff, UTF8_COMB },
++	{ 0x002e80, 0x002e99, UTF8_WIDE },
++	{ 0x002e9b, 0x002ef3, UTF8_WIDE },
++	{ 0x002f00, 0x002fd5, UTF8_WIDE },
++	{ 0x002ff0, 0x002ffb, UTF8_WIDE },
++	{ 0x003000, 0x003029, UTF8_WIDE },
++	{ 0x00302a, 0x00302f, UTF8_WIDE | UTF8_COMB },
++	{ 0x003030, 0x00303e, UTF8_WIDE },
++	{ 0x003041, 0x003096, UTF8_WIDE },
++	{ 0x003099, 0x00309a, UTF8_COMB },
++	{ 0x003099, 0x0030ff, UTF8_WIDE },
++	{ 0x003105, 0x00312d, UTF8_WIDE },
++	{ 0x003131, 0x00318e, UTF8_WIDE },
++	{ 0x003190, 0x0031ba, UTF8_WIDE },
++	{ 0x0031c0, 0x0031e3, UTF8_WIDE },
++	{ 0x0031f0, 0x00321e, UTF8_WIDE },
++	{ 0x003220, 0x003247, UTF8_WIDE },
++	{ 0x003248, 0x00324f, UTF8_AMBI },
++	{ 0x003250, 0x0032fe, UTF8_WIDE },
++	{ 0x003300, 0x004dbf, UTF8_WIDE },
++	{ 0x004e00, 0x00a48c, UTF8_WIDE },
++	{ 0x00a490, 0x00a4c6, UTF8_WIDE },
++	{ 0x00a66f, 0x00a672, UTF8_COMB },
++	{ 0x00a67c, 0x00a67d, UTF8_COMB },
++	{ 0x00a6f0, 0x00a6f1, UTF8_COMB },
++	{ 0x00a802, 0x00a802, UTF8_COMB },
++	{ 0x00a806, 0x00a806, UTF8_COMB },
++	{ 0x00a80b, 0x00a80b, UTF8_COMB },
++	{ 0x00a823, 0x00a827, UTF8_COMB },
++	{ 0x00a880, 0x00a881, UTF8_COMB },
++	{ 0x00a8b4, 0x00a8c4, UTF8_COMB },
++	{ 0x00a8e0, 0x00a8f1, UTF8_COMB },
++	{ 0x00a926, 0x00a92d, UTF8_COMB },
++	{ 0x00a947, 0x00a953, UTF8_COMB },
++	{ 0x00a960, 0x00a97c, UTF8_WIDE },
++	{ 0x00a980, 0x00a983, UTF8_COMB },
++	{ 0x00a9b3, 0x00a9c0, UTF8_COMB },
++	{ 0x00aa29, 0x00aa36, UTF8_COMB },
++	{ 0x00aa43, 0x00aa43, UTF8_COMB },
++	{ 0x00aa4c, 0x00aa4d, UTF8_COMB },
++	{ 0x00aa7b, 0x00aa7b, UTF8_COMB },
++	{ 0x00aab0, 0x00aab0, UTF8_COMB },
++	{ 0x00aab2, 0x00aab4, UTF8_COMB },
++	{ 0x00aab7, 0x00aab8, UTF8_COMB },
++	{ 0x00aabe, 0x00aabf, UTF8_COMB },
++	{ 0x00aac1, 0x00aac1, UTF8_COMB },
++	{ 0x00abe3, 0x00abea, UTF8_COMB },
++	{ 0x00abec, 0x00abed, UTF8_COMB },
++	{ 0x00ac00, 0x00d7a3, UTF8_WIDE },
++	{ 0x00d7b0, 0x00d7c6, UTF8_WIDE },
++	{ 0x00d7cb, 0x00d7fb, UTF8_WIDE },
++	{ 0x00e000, 0x00f8ff, UTF8_AMBI },
++	{ 0x00f900, 0x00faff, UTF8_WIDE },
++	{ 0x00fb1e, 0x00fb1e, UTF8_COMB },
++	{ 0x00fe00, 0x00fe0f, UTF8_AMBI | UTF8_COMB },
++	{ 0x00fe10, 0x00fe19, UTF8_WIDE },
++	{ 0x00fe20, 0x00fe26, UTF8_COMB },
++	{ 0x00fe30, 0x00fe52, UTF8_WIDE },
++	{ 0x00fe54, 0x00fe66, UTF8_WIDE },
++	{ 0x00fe68, 0x00fe6b, UTF8_WIDE },
++	{ 0x00ff01, 0x00ff60, UTF8_WIDE },
++	{ 0x00ffe0, 0x00ffe6, UTF8_WIDE },
++	{ 0x00fffd, 0x00fffd, UTF8_AMBI },
++	{ 0x0101fd, 0x0101fd, UTF8_COMB },
++	{ 0x010a01, 0x010a03, UTF8_COMB },
++	{ 0x010a05, 0x010a06, UTF8_COMB },
++	{ 0x010a0c, 0x010a0f, UTF8_COMB },
++	{ 0x010a38, 0x010a3a, UTF8_COMB },
++	{ 0x010a3f, 0x010a3f, UTF8_COMB },
++	{ 0x011000, 0x011002, UTF8_COMB },
++	{ 0x011038, 0x011046, UTF8_COMB },
++	{ 0x011080, 0x011082, UTF8_COMB },
++	{ 0x0110b0, 0x0110ba, UTF8_COMB },
++	{ 0x01b000, 0x01b001, UTF8_WIDE },
++	{ 0x01d165, 0x01d169, UTF8_COMB },
++	{ 0x01d16d, 0x01d172, UTF8_COMB },
++	{ 0x01d17b, 0x01d182, UTF8_COMB },
++	{ 0x01d185, 0x01d18b, UTF8_COMB },
++	{ 0x01d1aa, 0x01d1ad, UTF8_COMB },
++	{ 0x01d242, 0x01d244, UTF8_COMB },
++	{ 0x01f100, 0x01f10a, UTF8_AMBI },
++	{ 0x01f110, 0x01f12d, UTF8_AMBI },
++	{ 0x01f131, 0x01f131, UTF8_AMBI },
++	{ 0x01f13d, 0x01f13d, UTF8_AMBI },
++	{ 0x01f13f, 0x01f13f, UTF8_AMBI },
++	{ 0x01f142, 0x01f142, UTF8_AMBI },
++	{ 0x01f146, 0x01f146, UTF8_AMBI },
++	{ 0x01f14a, 0x01f14e, UTF8_AMBI },
++	{ 0x01f157, 0x01f157, UTF8_AMBI },
++	{ 0x01f15f, 0x01f15f, UTF8_AMBI },
++	{ 0x01f179, 0x01f179, UTF8_AMBI },
++	{ 0x01f17b, 0x01f17c, UTF8_AMBI },
++	{ 0x01f17f, 0x01f17f, UTF8_AMBI },
++	{ 0x01f18a, 0x01f18d, UTF8_AMBI },
++	{ 0x01f190, 0x01f190, UTF8_AMBI },
++	{ 0x01f200, 0x01f202, UTF8_WIDE },
++	{ 0x01f210, 0x01f23a, UTF8_WIDE },
++	{ 0x01f240, 0x01f248, UTF8_WIDE },
++	{ 0x01f250, 0x01f251, UTF8_WIDE },
++	{ 0x020000, 0x02fffd, UTF8_WIDE },
++	{ 0x030000, 0x03fffd, UTF8_WIDE },
++	{ 0x0e0100, 0x0e01ef, UTF8_AMBI | UTF8_COMB },
++	{ 0x0f0000, 0x0ffffd, UTF8_AMBI },
++	{ 0x100000, 0x10fffd, UTF8_AMBI },
+ };
+ 
+-struct utf8_width_entry	*utf8_width_root = NULL;
+-
+-int	utf8_overlap(struct utf8_width_entry *, struct utf8_width_entry *);
+ u_int	utf8_combine(const struct utf8_data *);
+ u_int	utf8_width(const struct utf8_data *);
+ 
+@@ -247,47 +503,11 @@
+ 	return (0);
+ }
+ 
+-/* Check if two width tree entries overlap. */
+-int
+-utf8_overlap(
+-    struct utf8_width_entry *item1, struct utf8_width_entry *item2)
+-{
+-	if (item1->first >= item2->first && item1->first <= item2->last)
+-		return (1);
+-	if (item1->last >= item2->first && item1->last <= item2->last)
+-		return (1);
+-	if (item2->first >= item1->first && item2->first <= item1->last)
+-		return (1);
+-	if (item2->last >= item1->first && item2->last <= item1->last)
+-		return (1);
+-	return (0);
+-}
+-
+ /* Build UTF-8 width tree. */
+ void
+ utf8_build(void)
+ {
+-	struct utf8_width_entry	**ptr, *item, *node;
+-	u_int			  i, j;
+-
+-	for (i = 0; i < nitems(utf8_width_table); i++) {
+-		item = &utf8_width_table[i];
+-
+-		for (j = 0; j < nitems(utf8_width_table); j++) {
+-			if (i != j && utf8_overlap(item, &utf8_width_table[j]))
+-				log_fatalx("utf8 overlap: %u %u", i, j);
+-		}
+-
+-		ptr = &utf8_width_root;
+-		while (*ptr != NULL) {
+-			node = *ptr;
+-			if (item->last < node->first)
+-				ptr = &(node->left);
+-			else if (item->first > node->last)
+-				ptr = &(node->right);
+-		}
+-		*ptr = item;
+-	}
++	return;
+ }
+ 
+ /* Combine UTF-8 into 32-bit Unicode. */
+@@ -333,6 +553,20 @@
+ 	return (1);
+ }
+ 
++static int
++comp(const void *vkey, const void *vent)
++{
++	u_int key = *(u_int *)vkey;
++	const struct utf8_width_entry *ent = vent;
++
++	if (key < ent->first)
++		return -1;
++	else if (key > ent->last)
++		return 1;
++	else
++		return 0;
++}
++
+ /* Lookup width of UTF-8 data in tree. */
+ u_int
+ utf8_width(const struct utf8_data *utf8data)
+@@ -342,14 +576,17 @@
+ 
+ 	value = utf8_combine(utf8data);
+ 
+-	item = utf8_width_root;
+-	while (item != NULL) {
+-		if (value < item->first)
+-			item = item->left;
+-		else if (value > item->last)
+-			item = item->right;
+-		else
+-			return (item->width);
++	item = bsearch(&value, utf8_width_table, nitems(utf8_width_table),
++		       sizeof(utf8_width_table[0]), comp);
++
++	if (item != NULL) {
++		if (item->width & UTF8_COMB)
++			return 0;
++		else if (item->width & UTF8_WIDE)
++			return 2;
++		else if (item->width & UTF8_AMBI)
++			return ambiwidth;
+ 	}
+-	return (1);
++
++	return 1;
+ }
